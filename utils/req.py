import requests
import json

import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

#import utils.constants as CONST

OLLAMA_BASE_URL = 'http://localhost:11434/api/generate'

def get_llava(image, is_ma):
    """
    Sends an image prompt to the Ollama API (LLaVA model) and returns the response.

    Parameters:
        image (str): The image data or path for LLaVA to analyze.

    Returns:
        str: The response from the LLaVA model.
    """
    payload = {
        "model": "llava:7b",
        "prompt": "Where are the character, presents and lakes (only those adjacent to the character) in the scene? Do not describe the way they look. Answer with as little words as possible. E.g. 'Character top left, present bottom right, lake below the character'; 'Character middle-left, present bottom right, lake right of character'",
        "images": [image]
    }

    if is_ma:
       payload = {
        "model": "llava:7b",
        #"prompt": "Where are the characters, present, platform and lakes (only those adjacent to the character) in the scene? Do not describe the way they look. Answer with as little words as possible. E.g. 'Character1 top left, Character2 top right, present bottom right, platform bottom left, lake below the character'; 'Character1 middle-left, Character2 middle-right, present bottom right, platform middle-top, lake right of character'",
        "prompt": "Where are the elves, gift, platform (green) and lakes (light blue) (only those adjacent to the elves) in the scene? Do not describe the way they look. Answer with as little words as possible. Example: 'elf1 top left, elf2 top right, gift bottom right, platform bottom left, lake below elf1, lake right elf2'. Other example: 'elf1 middle-left, elf2 middle-right, present bottom right, platform middle-top, lake right elf1, lake left elf1, lake above elf2'",
        "images": [image]
    } 

    response = requests.post(OLLAMA_BASE_URL, json=payload)

    full_response = ""
    for line in response.iter_lines():
        if line:
            data = json.loads(line.decode('utf-8'))
            full_response += data.get('response', '')
            if data.get('done', False):
                break

    return full_response.strip()

def get_llama(prompt):
    """
    Sends a text prompt to the Ollama API (LLaMA model) and returns the response.

    Parameters:
        prompt (str): The text prompt to send to LLaMA.

    Returns:
        str: The response from the LLaMA model.
    """
    payload = {
        "model": "llama3.2:1b",
        "prompt": f"Please summarize the information in this description. It is a rendered frame of a reinforcement learning algorithm. Focus on the position of the agent, the present. The character must avoid lakes. Answer with as little words as possible (e.g. character bottom left, present bottom right, lake on top of the character): {prompt}"
    }

    response = requests.post(OLLAMA_BASE_URL, json=payload, stream=True)
    
    full_response = ""
    for line in response.iter_lines():
        if line:
            data = json.loads(line.decode('utf-8'))
            full_response += data.get('response', '')
            if data.get('done', False):
                break
    
    return full_response.strip()

if __name__ == '__main__':
    prompt = "Is Thomas Mueller a more accomplished footballer than Neymar?"
    #img = ""
    prompt = "Agent1: top right, Agent2: top left, lake below agent1, Platform: bottom left, Present: bottom right."
    print(get_llama(prompt))